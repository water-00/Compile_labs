#include "Ast.h"
#include "SymbolTable.h"
#include "Unit.h"
#include "Instruction.h"
#include "IRBuilder.h"
#include <string>
#include "Type.h"

extern FILE *yyout;
int Node::counter = 0;
IRBuilder* Node::builder = nullptr;

Node::Node()
{
    seq = counter++;
}

void Node::backPatch(std::vector<Instruction*> &list, BasicBlock*bb)
{
    for(auto &inst:list)
    {
        if(inst->isCond())
            dynamic_cast<CondBrInstruction*>(inst)->setTrueBranch(bb);
        else if(inst->isUncond())
            dynamic_cast<UncondBrInstruction*>(inst)->setBranch(bb);
    }
}


void Node::backPatchFalse(std::vector<Instruction*> &list, BasicBlock*bb)
{
    for(auto &inst:list)
    {
        if(inst->isCond())
            dynamic_cast<CondBrInstruction*>(inst)->setFalseBranch(bb);
        else if(inst->isUncond())
            dynamic_cast<UncondBrInstruction*>(inst)->setBranch(bb);
    }
}

std::vector<Instruction*> Node::merge(std::vector<Instruction*> &list1, std::vector<Instruction*> &list2)
{
    std::vector<Instruction*> res(list1);
    res.insert(res.end(), list2.begin(), list2.end());
    return res;
}

void Ast::genCode(Unit *unit)
{
    // std::Cout  << "in Ast::genCode(Unit *unit)" << std::endl;
    IRBuilder *builder = new IRBuilder(unit);
    Node::setIRBuilder(builder);
    fprintf(yyout, "declare i32 @getint()\ndeclare void @putint(i32)\ndeclare i32 @getch()\ndeclare void @putch(i32)\n");
    root->genCode();
    // std::Cout  << "out Ast::genCode(Unit *unit)" << std::endl;
}

void UnaryExpr::genCode() {
    // std::Cout  << "in UnaryExpr::genCode()" << std::endl;
    // 思路：
    // 1. 对于+ -，生成一个二元表达式，与0做运算，通过运算符转换expr的值即可
    // 2. 对于!，生成icmp，与0比较，把expr转换为比较的结果即可
    BasicBlock *bb = builder->getInsertBB();
    if (op == UNARY_MINUS) {
        expr->genCode();
        Operand *src = expr->getOperand();
        ConstantSymbolEntry *se = new ConstantSymbolEntry(TypeSystem::intType, 0);
        Constant *addr_num_0 = new Constant(se);
        Operand *num = addr_num_0->getOperand();

        new BinaryInstruction(BinaryInstruction::SUB, dst, num, src, bb);
        
    } else if (op == UNARY_PLUS) {
        expr->genCode();
        Operand *src = expr->getOperand();
        ConstantSymbolEntry *se = new ConstantSymbolEntry(TypeSystem::intType, 0);
        Constant *addr_num_0 = new Constant(se);
        Operand *num = addr_num_0->getOperand();

        new BinaryInstruction(BinaryInstruction::ADD, dst, num, src, bb);
    } else if (op == NOT) {
        expr->genCode();
        Operand *src = expr->getOperand(); 
        ConstantSymbolEntry *se = new ConstantSymbolEntry(TypeSystem::intType, 0);
        Constant *addr_num_0 = new Constant(se);
        Operand *num = addr_num_0->getOperand();

        Operand* t = new Operand(new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel()));
        new CmpInstruction(CmpInstruction::NE, t, src, num, bb);
        src = t;
        dst->getType()->setKind(Type::BOOL);
    }

    // std::Cout  << "out UnaryExpr::genCode()" << std::endl;
}

void BinaryExpr::genCode()
{
    // std::Cout  << "in BinaryExpr::genCode()" << std::endl;
    BasicBlock *bb = builder->getInsertBB();
    Function *func = bb->getParent();
    if (op == AND)
    {
        BasicBlock *trueBB = new BasicBlock(func);  // if the result of lhs is true, jump to the trueBB. 放expr2的中间代码的位置

        // 设置前驱后继
        trueBB->addPred(bb);
        bb->addSucc(trueBB);

        expr1->genCode();
        backPatch(expr1->trueList(), trueBB); // 如果expr1对了，那我要跳转到trueBB，也就是expr2开始的位置
        
        // // 生成expr1与0相比的指令
        // // 生成0
        // ConstantSymbolEntry *se = new ConstantSymbolEntry(TypeSystem::intType, 0);
        // Constant *addr_num_0 = new Constant(se);
        // Operand *num = addr_num_0->getOperand();

        // // 进行比较，创建一个临时变量存放比较结果
        // Operand* t1 = new Operand(new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel()));
        // Operand *src1 = expr1->getOperand();
        // CmpInstruction *inst1 = new CmpInstruction(CmpInstruction::NE, t1, src1, num, bb);
        // src1 = t1;
        // bb->insertBack(inst1);


        // 思路：或许可以不要插入到某一BasicBlock，而是直接调用inst1的output

        builder->setInsertBB(trueBB);               // set the insert point to the trueBB so that intructions generated by expr2 will be inserted into it.
        expr2->genCode();
        true_list = expr2->trueList(); // 如果整个expr1 && expr2正确了，那要跳转的地方就是expr2->trueList()
        false_list = merge(expr1->falseList(), expr2->falseList());
        
        // // 生成expr2与0相比的指令
        // // 还存在的问题是：不知道该把这条比较指令放那，也就是说不知道dst应该选什么
        // Operand* t2 = new Operand(new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel()));
        // Operand *src2 = expr2->getOperand();
        // CmpInstruction *inst2 = new CmpInstruction(CmpInstruction::NE, t2, src2, num, bb);
        // src2 = t2;
        // bb = builder->getInsertBB();
        // bb->insertBack(inst2);

        dst->getType()->setKind(Type::BOOL);
    }
    else if(op == OR)
    {
        // Todo
        BasicBlock *falseBB = new BasicBlock(func); // （如果expr为false）放expr2中间代码的位置

        // 设置前驱后继
        falseBB->addPred(bb);
        bb->addSucc(falseBB);

        expr1->genCode();
        backPatch(expr1->falseList(), falseBB);
        builder->setInsertBB(falseBB);
        expr2->genCode();
        false_list = expr2->falseList();
        true_list = merge(expr1->trueList(), expr2->trueList());

        dst->getType()->setKind(Type::BOOL);
    }
    else if(op >= LESS && op <= GREATER)
    {
        // Todo
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case LESS:
            opcode = CmpInstruction::L;
            break;
        case LESSEQUAL:
            opcode = CmpInstruction::LE;
            break;
        case EQUAL:
            opcode = CmpInstruction::E;
            break;
        case NOTEQUAL:
            opcode = CmpInstruction::NE;
            break;
        case GREATEREQUAL:
            opcode = CmpInstruction::GE;
            break;
        case GREATER:
            opcode = CmpInstruction::G;
            break;
        default:
            break;
        }
        new CmpInstruction(opcode, dst, src1, src2, bb);

        // 添加到truelist和falselist
        true_list = merge(expr1->trueList(), expr2->trueList());
        false_list = merge(expr1->falseList(), expr2->falseList());

        // 条件跳转
        Instruction *temp = new CondBrInstruction(nullptr, nullptr, dst, bb);
        this->trueList().push_back(temp);
        this->falseList().push_back(temp);

        dst->getType()->setKind(Type::BOOL);
    }
    else if(op >= ADD && op <= DIV)
    {
        expr1->genCode();
        expr2->genCode();
        Operand *src1 = expr1->getOperand();
        Operand *src2 = expr2->getOperand();
        int opcode;
        switch (op)
        {
        case ADD:
            opcode = BinaryInstruction::ADD;
            break;
        case SUB:
            opcode = BinaryInstruction::SUB;
            break;
        case MOD:
            opcode = BinaryInstruction::MOD;
            break;
        case MUL:
            opcode = BinaryInstruction::MUL;
            break;
        case DIV:
            opcode = BinaryInstruction::DIV;
            break;
        }
        new BinaryInstruction(opcode, dst, src1, src2, bb);
    }
    // std::Cout  << "out BinaryExpr::genCode()" << std::endl;
}

void IfStmt::genCode()
{
    // 思路：
    // 1. 如果cond是a || b或者a && b，则在BinaryExpr中需要生成dst = icmp ne a 0
    //    a || b, a ne 0 -> 跳转到then_bb
    //    a && b, a ne 0 -> 跳转到b
    // 2. 如果是a <, >, ... b，则在BinaryExpr中生成CmpInstruction，a和b比
    // 3. 如果是a +, -, ... b，则在BinaryExor中生成BinaryInstruction
    // 得到dst后，根据不同的dst类型进行处理
    // std::Cout << "in IfStmt::genCode()\n";
    Function *func;
    BasicBlock *then_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    // std::Cout << "builder->getInsertBB()->getNo() = " << builder->getInsertBB()->getNo() << std::endl;
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);

    // std::Cout << "label: " << then_bb->getNo() << ", label: " << end_bb->getNo() << std::endl;

    // 前驱后继
    then_bb -> addPred(builder->getInsertBB());
    builder -> getInsertBB()->addSucc(then_bb);
    end_bb -> addPred(then_bb);
    then_bb -> addSucc(end_bb);
    end_bb -> addPred(builder->getInsertBB());
    builder -> getInsertBB()->addSucc(end_bb);

    cond->genCode();

    // TODO: 还需要判断，如果cond不是一个bool类型
    // 那么需要将cond与0比较后再跳转
    if (!cond->getOperand()->getType()->isBool()) {
        // std::Cout << "这不是一个bool" << std::endl;
        BasicBlock *bb = builder->getInsertBB();

        // 生成0
        ConstantSymbolEntry *se = new ConstantSymbolEntry(TypeSystem::intType, 0);
        Constant *addr_num_0 = new Constant(se);
        Operand *num = addr_num_0->getOperand();

        // 进行比较，创建一个临时变量存放比较结果
        Operand* t = new Operand(new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel()));
        Operand *src = cond->getOperand();
        src = t;
        // 比较的dst为t
        CmpInstruction *inst1 = new CmpInstruction(CmpInstruction::NE, t, src, num, bb);
        cond->trueList().push_back(inst1);
        cond->falseList().push_back(inst1);
        // 根据t跳转
        Instruction *inst2 = new CondBrInstruction(nullptr, nullptr, t, bb);
        cond->trueList().push_back(inst2);
        cond->falseList().push_back(inst2);
    }

    backPatch(cond->trueList(), then_bb);
    backPatchFalse(cond->falseList(), end_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb); // 在then_bb块的结束，要生成一条跳转到end_bb块的指令

    builder->setInsertBB(end_bb);
    // std::Cout << "out IfStmt::genCode()\n";
}

void IfElseStmt::genCode()
{
    // std::Cout << "in IfElseStmt::genCode()\n";
    // Todo
    Function *func;
    BasicBlock *then_bb, *else_bb, *end_bb;

    func = builder->getInsertBB()->getParent();
    then_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);
    else_bb = new BasicBlock(func);

    // 前驱后继
    then_bb -> addPred(builder->getInsertBB());
    builder -> getInsertBB()->addSucc(then_bb);
    else_bb -> addPred(builder->getInsertBB());
    builder -> getInsertBB()->addSucc(else_bb);
    end_bb -> addPred(then_bb);
    then_bb -> addSucc(end_bb);
    end_bb -> addPred(else_bb);
    else_bb -> addSucc(end_bb);

    cond->genCode();

    // TODO: 还需要判断，如果cond不是一个bool类型
    if (!cond->getOperand()->getType()->isBool()) {
        // std::Cout << "这不是一个bool" << std::endl;
        BasicBlock *bb = builder->getInsertBB();

        // 生成0
        ConstantSymbolEntry *se = new ConstantSymbolEntry(TypeSystem::intType, 0);
        Constant *addr_num_0 = new Constant(se);
        Operand *num = addr_num_0->getOperand();

        // 进行比较，创建一个临时变量存放比较结果
        Operand* t = new Operand(new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel()));
        Operand *src = cond->getOperand();
        src = t;
        // 比较指令的dst为t
        CmpInstruction *inst1 = new CmpInstruction(CmpInstruction::NE, t, src, num, bb);
        cond->trueList().push_back(inst1);
        cond->falseList().push_back(inst1);
        // 根据t跳转
        Instruction *inst2 = new CondBrInstruction(nullptr, nullptr, t, bb);
        cond->trueList().push_back(inst2);
        cond->falseList().push_back(inst2);
    }
    backPatch(cond->trueList(), then_bb);
    backPatchFalse(cond->falseList(), else_bb);

    builder->setInsertBB(then_bb);
    thenStmt->genCode();
    then_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, then_bb); // 在then_bb块的结束，我要生成一条跳转到end_bb块的指令
    builder->setInsertBB(else_bb);
    elseStmt->genCode();
    else_bb = builder->getInsertBB();
    new UncondBrInstruction(end_bb, else_bb); // 在else_bb块的结束，我要生成一条跳转到end_bb块的指令

    builder->setInsertBB(end_bb);
    // std::Cout << "out IfElseStmt::genCode()\n";
}

void WhileStmt::genCode() {
    // std::Cout << "in WhileStmt::genCode()\n";
    Function *func;
    BasicBlock *loop_bb, *end_bb, *cond_bb;

    func = builder->getInsertBB()->getParent();
    loop_bb = new BasicBlock(func);
    end_bb = new BasicBlock(func);
    cond_bb = new BasicBlock(func);

    // 从当前块结束后要跳到cond_bb块，再一次判断条件
    UncondBrInstruction *temp = new UncondBrInstruction(cond_bb, builder->getInsertBB());
    temp->output();

    // 前驱后驱
    cond_bb->addPred(builder->getInsertBB());
    builder->getInsertBB()->addSucc(cond_bb);
    loop_bb->addPred(cond_bb);
    cond_bb->addSucc(loop_bb);
    end_bb->addPred(loop_bb);
    loop_bb->addSucc(end_bb);
    end_bb->addPred(cond_bb);
    cond_bb->addSucc(end_bb);

    builder->setInsertBB(cond_bb);
    cond->genCode();

    // 如果传入的不是bool类型，同if，把cond拿去和0比较
    if (!cond->getOperand()->getType()->isBool()) {
        // std::Cout << "这不是一个bool" << std::endl;
        BasicBlock *bb = cond->builder->getInsertBB();

        // 生成0
        ConstantSymbolEntry *se = new ConstantSymbolEntry(TypeSystem::intType, 0);
        Constant *addr_num_0 = new Constant(se);
        Operand *num = addr_num_0->getOperand();

        // 进行比较，创建一个临时变量存放比较结果
        Operand* t = new Operand(new TemporarySymbolEntry(TypeSystem::boolType, SymbolTable::getLabel()));
        Operand *src = cond->getOperand();
        src = t;
        // 比较的dst为t
        CmpInstruction *inst1 = new CmpInstruction(CmpInstruction::NE, t, src, num, bb);
        cond->trueList().push_back(inst1);
        cond->falseList().push_back(inst1);
        // 根据t跳转
        Instruction *inst2 = new CondBrInstruction(nullptr, nullptr, t, bb);
        cond->trueList().push_back(inst2);
        cond->falseList().push_back(inst2);
    }
    backPatch(cond->trueList(), loop_bb); // 如果cond为真，进入loop_bb块
    backPatchFalse(cond->falseList(), end_bb); // 如果cond为假，进入end_bb块

    builder->setInsertBB(loop_bb);
    whileStmt->genCode();
    loop_bb = builder->getInsertBB();
    new CondBrInstruction(cond_bb, end_bb, cond->getOperand(), loop_bb); // 确定下一轮循环的cond的两个分支

    builder->setInsertBB(end_bb);

    // std::Cout << "out WhileStmt::genCode()\n";
}

void Constant::genCode()
{
    // we don't need to generate code.

    // std::Cout  << "in Constant::genCode()" << std::endl;

    // std::Cout  << "out Constant::genCode()" << std::endl;

}

void Id::genCode()
{
    // std::Cout  << "in Id::genCode()" << std::endl;
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
    // std::Cout  << "out Id::genCode()" << std::endl;
}

void ConstId::genCode(){
    // std::Cout  << "in ConstId::genCode()" << std::endl;

    // std::Cout  << "out ConstId::genCode()" << std::endl;
}

void CompoundStmt::genCode()
{
    // std::Cout  << "in CompoundStmt::genCode()" << std::endl;
    stmt->genCode();
    // std::Cout  << "out CompoundStmt::genCode()" << std::endl;
}

void SeqNode::genCode()
{
    // std::Cout  << "in SeqNode::genCode()" << std::endl;
    stmt1->genCode();
    stmt2->genCode();
    // std::Cout  << "out SeqNode::genCode()" << std::endl;
}

void DeclStmt::genCode()
{
    // std::Cout << "in DeclStmt::genCode()\n";
    for (auto id : ids->idlist) {
        IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
        if(se->isGlobal())
        {
            // se = 符号表中的变量，addr_se = 该变量的地址，它也在符号表中
            // 像load、store指令操作的就是addr_se & addr而非se
            Operand *addr;
            SymbolEntry *addr_se;
            addr_se = new IdentifierSymbolEntry(*se);
            addr_se->setType(new PointerType(se->getType()));
            addr = new Operand(addr_se);
            se->setAddr(addr);
            Operand* num; // 全局变量在生成中间代码时需要数值
            // 对某个全局se，需要判断它有没有被初始化
            bool inited = false;
            for (long unsigned int i = 0; i < ids->assignList.size(); i++) {
                if (ids->assignList.at(i)->getLval()->getSymPtr() == se) {
                    // 如果有，则生成对应指令，并设置num
                    ids->assignList.at(i)->genCode();
                    num = ids->assignList.at(i)->getExpr()->getOperand();
                    inited = true;
                    break;
                }
            }
            if (!inited) {
                // 如果没有，则将num置成0
                ConstantSymbolEntry *se = new ConstantSymbolEntry(TypeSystem::intType, 0);
                Constant *addr_num_0 = new Constant(se);
                num = addr_num_0->getOperand();
            }

            // 生成global变量的alloc指令
            Instruction *alloca = new AllocaGlobalInstruction(addr, num, se);
            alloca->output();
        }
        else if(se->isLocal())
        {
            // 对局部变量来说，在中间代码生成的顺序是：先生成一句int语句中的所有alloca语句，再对其中有赋值操作的变量做store
            // 所以第一次遍历只生成alloca就行了
            Function *func = builder->getInsertBB()->getParent();
            BasicBlock *entry = func->getEntry();
            Instruction *alloca;

            Operand *addr;
            SymbolEntry *addr_se;
            Type *type;
            type = new PointerType(se->getType());
            addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel()); // 生成一个临时变量（临时符号表项）t_x，作为se的地址
            addr = new Operand(addr_se);
            alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
            entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
            se->setAddr(addr);                                          // set the addr operand in symbol entry so that we can use it in subsequent code generation.
        }
    }

    // 第二次遍历再对有赋值语句的局部变量生成store语句
    for (auto id : ids->idlist) {
        IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(id->getSymPtr());
        if (se->isLocal()) {
            // 对DeclStmt中的每个局部变量，检查它是否有赋值语句
            for (long unsigned int i = 0; i < ids->assignList.size(); i++) {
                if (ids->assignList.at(i)->getLval()->getSymPtr() == se) {
                    // 如果有，则生成该赋值指令，并修改se地址为有值的新addr
                    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(ids->assignList.at(i)->getLval()->getSymPtr())->getAddr();
                    se->setAddr(addr);
                    ids->assignList.at(i)->genCode();
                }
            }
        }
    }
    // std::Cout << "out DeclStmt::genCode()\n";
}

void ConstDeclStmt::genCode() {
    // std::Cout << "in ConstDeclStmt::genCode()\n";
    int index = 0;
    for (auto cid : cids->conidlist) {
        // 对于const变量，方便的是idList和assignList中每一项对应，不用再用循环去通过id找assign了
        IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(cid->getSymPtr());
        if(se->isGlobal())
        {
            Operand *addr;
            SymbolEntry *addr_se;
            addr_se = new IdentifierSymbolEntry(*se);
            addr_se->setType(new PointerType(se->getType()));
            addr = new Operand(addr_se);
            se->setAddr(addr);
            // 直接利用index找到cid对应的assign
            cids->assignList.at(index)->genCode();
            Operand* num = cids->assignList.at(index)->getExpr()->getOperand(); // 全局变量在生成中间代码时需要数值
            // 生成global的alloc指令
            Instruction *alloca = new AllocaGlobalInstruction(addr, num, se);
            alloca->output();
        }
        else if(se->isLocal())
        {
            Function *func = builder->getInsertBB()->getParent();
            BasicBlock *entry = func->getEntry();
            Instruction *alloca;

            Operand *addr;
            SymbolEntry *addr_se;
            Type *type;
            type = new PointerType(se->getType());
            addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel()); // 生成一个临时变量（临时符号表项）t_x
            addr = new Operand(addr_se);
            alloca = new AllocaInstruction(addr, se);                   // allocate space for local id in function stack.
            entry->insertFront(alloca);                                 // allocate instructions should be inserted into the begin of the entry block.
            se->setAddr(addr);                                          // set the addr operand in symbol entry so that we can use it in subsequent code generation.

            // DIFFERENT
            cids->assignList.at(index)->genCode(); // 生成cid对应的assign代码
            Operand *addr1 = dynamic_cast<IdentifierSymbolEntry*>(cids->assignList.at(index)->getLval()->getSymPtr())->getAddr();
            se->setAddr(addr1); 
            Operand *src = cids->assignList.at(index)->getExpr()->getOperand();
            BasicBlock *t = builder->getInsertBB();
            new StoreInstruction(addr1, src, t);     
        }
        index++;
    }
    // std::Cout << "out ConstDeclStmt::genCode()\n";
}

void ReturnStmt::genCode()
{
    // std::Cout  << "in ReturnStmt::genCode()" << std::endl;
    // Todo
    BasicBlock *bb = builder->getInsertBB();
    retValue->genCode();
    Operand *src = retValue->getOperand();
    new RetInstruction(src, bb);
    // std::Cout  << "out ReturnStmt::genCode()" << std::endl;
}

void AssignStmt::genCode()
{
    // std::Cout << "in AssignStmt::genCode()\n";
    BasicBlock *bb = builder->getInsertBB();
    expr->genCode();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(lval->getSymPtr())->getAddr();
    Operand *src = expr->getOperand();
    /***
     * We haven't implemented array yet, the lval can only be ID. So we just store the result of the `expr` to the addr of the id.
     * If you want to implement array, you have to caculate the address first and then store the result into it.
     */
    new StoreInstruction(addr, src, bb);
    // std::Cout << "out AssignStmt::genCode()\n";
}

void IdList::genCode() {
    // std::Cout << "in IdList::genCode()\n";

    // std::Cout << "out IdList::genCode()\n";
}

void ConIdList::genCode() {
    // std::Cout << "in ConIdList::genCode()\n";

    // std::Cout << "out ConIdList::genCode()\n";
}

void FunctionDef::genCode()
{
    // std::Cout  << "\nin FunctionDef::genCode()" << std::endl;
    Unit *unit = builder->getUnit();
    Function *func = new Function(unit, se);
    BasicBlock *entry = func->getEntry(); // 入口
    
    // set the insert point to the entry basicblock of this function.
    builder->setInsertBB(entry);

    if (FPs != nullptr) {
        FPs->genCode();
    }

    stmt->genCode();

    /**
     * Construct control flow graph. You need do set successors and predecessors for each basic block.
     * Todo
    */
    // std::Cout  << "out FunctionDef::genCode()" << std::endl;
}

void FuncFParam::genCode(){ // 函数形参
    // std::Cout << "in FuncFParam::genCode()\n";
    // 把值从内存加载到参数变量中
    BasicBlock *bb = builder->getInsertBB();
    Operand *addr = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getAddr();
    new LoadInstruction(dst, addr, bb);
    // std::Cout << "out FuncFParam::genCode()\n";
}

void FuncFParams::genCode() { // 函数形参列表
    // std::Cout << "in FuncFParams::genCode()\n";
    Function *func = builder->getInsertBB()->getParent();
    for (long unsigned int i = 0; i < FPs.size(); i++) {
        // 对于形参列表中的一个形参，需要做的是：
        // 1. 创建一个临时变量，其地址内存放call function时传给该形参的值
        //    %3 = alloca i32, align 4
        //    store i32 %0, i32* %3, align 4 ; %0为函数形参，%3为函数内创建的临时变量

        // 2. 创建一个临时变量，用于从上一步的临时变量中取出操作数(这应该是其他地方做的，比如在用%3计算前)
        //    %5 = load i32, i32* %3, align 4 ； %5就是这一步创建的临时变量

        // type1--addr_se1--addr1: 类型为形参类型的指针，就是new StoreInstruction的第一个操作数，dst，在中间代码的store中会被放到后  %3
        // type2--addr_se2--addr2: 类型为形参类型，就是StoreInstruction的第二个操作数，src，在中间代码的store中会被放到前  %0
        //     StoreInstruction(Operand *dst, Operand *src, BasicBlock *insert_bb = nullptr);
        IdentifierSymbolEntry *se = dynamic_cast<IdentifierSymbolEntry *>(FPs[i]->getSymPtr());
        Type *type1 = new PointerType(se->getType());
        Type *type2 = new IntType(32); // 如果要支持float类型那要改的是这里，src

        SymbolEntry *addr_se1 = new TemporarySymbolEntry(type1, SymbolTable::getLabel());
        SymbolEntry *addr_se2 = new TemporarySymbolEntry(type2, SymbolTable::getLabel());

        Operand *addr1 = new Operand(addr_se1);
        Operand *addr2 = new Operand(addr_se2);

        BasicBlock *entry = func->getEntry();
        AllocaInstruction *alloca = new AllocaInstruction(addr1, se); // 创建%3
        entry->insertFront(alloca);
        StoreInstruction *store = new StoreInstruction(addr1, addr2); // 用于生成store i32 %0, i32* %3, align 4
        entry->insertBack(store);

        se->setAddr(addr1); // se的地址是dst(%0的地址是%3)
        func->getParams().push_back(addr2); // function的形参列表多了src(%0)
        // 总之就是StoreInstruction中参数的顺序(dst, src)和真正store指令中操作数的顺序(src.type, src, dst.type, dst)反了
    }
    // std::Cout << "out FuncFParams::genCode()\n";
}

void FuncRParams::genCode() { // 函数实参列表
    // do nothing
    // std::Cout << "in FuncRParams::genCode()\n";

    // std::Cout << "out FuncRParams::genCode()\n";
}

void FunctionCall::genCode() {
    // std::Cout << "in FunctionCall::genCode()\n";
    std::vector<Operand*> params;

    if (RPs != nullptr) {
        for (long unsigned int i = 0; i < RPs->Exprs.size(); i++) {
            if (RPs->Exprs[i] != nullptr) {
                RPs->Exprs[i]->genCode();
            }
            params.push_back(RPs->Exprs[i]->getOperand()); // 添加实参
        }
    }

    // 把返回值放到操作数dst中
    BasicBlock *entry = builder->getInsertBB();

    Type *type = new IntType(32); // 用于放返回值的临时变量
    SymbolEntry *addr_se = new TemporarySymbolEntry(type, SymbolTable::getLabel());
    dst = new Operand(addr_se);

    CallInstruction *call = new CallInstruction(dst, symbolEntry, params);
    entry->insertBack(call);

    // std::Cout << "out FunctionCall::genCode()\n";
}


void Empty::genCode() {
    // std::Cout << "in Empty::genCode()\n";

    // std::Cout << "out Empty::genCode()\n";
}

void SingleStmt::genCode() {
    // std::Cout << "in SingleStmt::genCode()\n";
    expr->genCode();
    // std::Cout << "out SingleStmt::genCode()\n";
}









// typeCheck

int retType; // 用于记录子表达式的返回类型
// 0--INT
// 1--VOID
// 2--BOOL
// 3--FUNC
// 4--PTR

void Ast::typeCheck()
{
    // // std::Cout << "Ast::typeCheck\n";

    if(root != nullptr) 
    {}
        // root->typeCheck();
}

void UnaryExpr::typeCheck(){
    // std::Cout << "UnaryExpr::typeCheck()\n";

    std::string op_str = "";
    switch (op)
    {
    case UnaryExpr::UNARY_MINUS:
        op_str = "UNARY_MINUS";
        break;
    case UnaryExpr::UNARY_PLUS:
        op_str = "UNARY_PLUS";
        break;
    case UnaryExpr::NOT:
        op_str = "NOT";
        break;
    default:
        break;
    }

    if (expr->getType()->isVoid()) {
        fprintf(stderr, "invalid operand with type \"void\" in UnaryExpr: op = %s, operand = %s", op_str.c_str(), expr->toStr().c_str());
        exit(EXIT_FAILURE);
    }
}

void BinaryExpr::typeCheck(){
    // std::Cout << "BinaryExpr::typeCheck()\n";
    Type *type1 = expr1 -> getSymPtr() -> getType();
    Type *type2 = expr2 -> getSymPtr() -> getType();
    if(type1 != type2){
        fprintf(stderr, "type %s and %s mismatch",
                type1 -> toStr().c_str(), type2 -> toStr().c_str());
        exit(EXIT_FAILURE);
    }
    symbolEntry -> setType(type1);
    expr1 -> typeCheck();
    expr2 -> typeCheck();
}

void Constant::typeCheck(){
    // std::Cout << "Constant::typeCheck()\n";
}

void Id::typeCheck(){
    // std::Cout << "Id::typeCheck()\n";
}

void ConstId::typeCheck(){
    // std::Cout << "ConstId::typeCheck()\n";
}

void FuncFParam::typeCheck(){
    // std::Cout << "FuncFParam::typeCheck()\n";
}



void CompoundStmt::typeCheck(){
    // std::Cout << "CompoundStmt::typeCheck()\n";
    stmt->typeCheck();
}

void SeqNode::typeCheck(){
    // std::Cout << "SeqNode::typeCheck()\n";
    stmt1->typeCheck();
    stmt2->typeCheck();
}

void DeclStmt::typeCheck(){
    // std::Cout << "DeclStmt::typeCheck()\n";
    for (long unsigned int i = 0; i < ids->assignList.size(); i++) {
        ids->assignList.at(i)->typeCheck();
    }
}

void ConstDeclStmt::typeCheck(){
    // std::Cout << "ConstDeclStmt::typeCheck()\n";
}

void IfStmt::typeCheck(){
    // std::Cout << "IfStmt::typeCheck()\n";
    cond->typeCheck();
    thenStmt->typeCheck();
}

void IfElseStmt::typeCheck(){
    // std::Cout << "IfElseStmt::typeCheck()\n";
    cond->typeCheck();
    thenStmt->typeCheck();
    elseStmt->typeCheck();
}

void WhileStmt::typeCheck(){
    // std::Cout << "WhileStmt::typeCheck()\n";
}

void ReturnStmt::typeCheck(){
    // std::Cout << "ReturnStmt::typeCheck()\n";
    if(retValue != nullptr) {
        retValue->typeCheck();
        type = retValue->getType();
    }
    else {
        type = new VoidType();
    }
}

void AssignStmt::typeCheck(){
    // std::Cout << "AssignStmt::typeCheck()\n";
    expr->typeCheck();
}

void FunctionDef::typeCheck(){
    // std::Cout << "\nFunctionDef::typeCheck()\n";
    // stmt->typeCheck();
}

void FunctionCall::typeCheck(){
    // std::Cout << "FunctionCall::typeCheck()\n";
}

void IdList::typeCheck(){
    // std::Cout << "IdList::typeCheck()\n";
}

void ConIdList::typeCheck(){
    // std::Cout << "ConIdList::typeCheck()\n";
}

void FuncFParams::typeCheck(){
    // std::Cout << "FuncFParams::typeCheck()\n";
}

void FuncRParams::typeCheck(){
    // std::Cout << "FuncRParams::typeCheck()\n";
}

void Empty::typeCheck(){
    // std::Cout << "Empty::typeCheck()\n";
    // do nothing
}

void SingleStmt::typeCheck(){
    // std::Cout << "SingleStmt::typeCheck()\n";
}










void Ast::output()
{
    fprintf(yyout, "program\n");
    if(root != nullptr)
        root->output(4); // root的类型开始是Node*，但是它被实例化了，于是会调用具体类型的output()
}

void UnaryExpr::output(int level)
{
    std::string op_str;
    switch (op)
    {
    case NOT:
        op_str = "not";
        break;
    case UNARY_PLUS:
        op_str = "unary plus";
        break;
    case UNARY_MINUS:
        op_str = "unary minus";
        break;
    }
    fprintf(yyout, "%*cUnaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr->output(level + 4);
}

void BinaryExpr::output(int level)
{
    std::string op_str;
    // 多加点运算符的token
    switch(op)
    {
        case OR:
            op_str = "or";
            break;
        case AND:
            op_str = "and";
            break;
        case EQUAL:
            op_str = "equal";
            break;
        case NOTEQUAL:
            op_str = "notEqual";
            break;
        case LESS:
            op_str = "less";
            break;
        case LESSEQUAL:
            op_str = "lessEqual";
            break;
        case GREATER:
            op_str = "GREATER";
            break;
        case GREATEREQUAL:
            op_str = "GREATEREQUAL";
            break;
        case ADD:
            op_str = "add";
            break;
        case SUB:
            op_str = "sub";
            break;
        case MOD:
            op_str = "mod";
            break;
        case ASSIGN:
            op_str = "assign";
            break;
        case MUL:
            op_str = "mul";
            break;
        case DIV:
            op_str = "div";
            break;
    }
    fprintf(yyout, "%*cBinaryExpr\top: %s\n", level, ' ', op_str.c_str());
    expr1->output(level + 4);
    expr2->output(level + 4);
}

void Constant::output(int level)
{
    std::string type, value;
    type = symbolEntry->getType()->toStr();
    value = symbolEntry->toStr();
    fprintf(yyout, "%*cIntegerLiteral\tvalue: %s\ttype: %s\n", level, ' ',
            value.c_str(), type.c_str());
}

void Id::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    fprintf(yyout, "%*cId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
}

void ConstId::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry)->getScope();
    fprintf(yyout, "%*cConstId\tname: %s\tscope: %d\ttype: %s\n", level, ' ',
            name.c_str(), scope, type.c_str());
}

void FuncFParam::output(int level)
{
    std::string name, type;
    int scope;
    name = symbolEntry -> toStr();
    type = symbolEntry -> getType() -> toStr();
    scope = dynamic_cast<IdentifierSymbolEntry*>(symbolEntry) -> getScope();
    fprintf(yyout, "%*cFuncFParam\tname:%s\tscope:%d\ttype:%s\n", level, ' ',
            name.c_str(), scope, type.c_str());
}



void CompoundStmt::output(int level)
{
    fprintf(yyout, "%*cCompoundStmt\n", level, ' ');
    stmt->output(level + 4);
}

void SeqNode::output(int level)
{
    // fprintf(yyout, "%*cSequence\n", level, ' ');
    stmt1->output(level);
    stmt2->output(level);
}

void DeclStmt::output(int level)
{
    fprintf(yyout, "%*cDeclStmt\n", level, ' ');
    ids->output(level + 4);
}

void ConstDeclStmt::output(int level)
{
    fprintf(yyout, "%*cConstDeclStmt\n", level, ' ');
    cids->output(level + 4);
}

void IfStmt::output(int level)
{
    fprintf(yyout, "%*cIfStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
}

void IfElseStmt::output(int level)
{
    fprintf(yyout, "%*cIfElseStmt\n", level, ' ');
    cond->output(level + 4);
    thenStmt->output(level + 4);
    elseStmt->output(level + 4);
}

void WhileStmt::output(int level)
{
    fprintf(yyout, "%*cWhileStmt\n", level, ' '); // 打印level个'*'
    cond->output(level + 4); // 调用的是ExprNode子类中的BinaryExpr（这也是cond的类型，且仅在本程序中是BinaryExpr）中的output()
    whileStmt->output(level + 4); // 调用的是StmtNode子类中的CompoundStmt中的output（因为本程序中的whileStmt是CompoundStmt类型的）
}

void ReturnStmt::output(int level)
{
    fprintf(yyout, "%*cReturnStmt\n", level, ' ');
    retValue->output(level + 4);
}

void AssignStmt::output(int level)
{
    fprintf(yyout, "%*cAssignStmt\n", level, ' ');
    lval->output(level + 4);
    expr->output(level + 4);
}

void FunctionDef::output(int level)
{
    std::string name, type;
    name = se->toStr();
    type = se->getType()->toStr();
    fprintf(yyout, "%*cFunctionDefine function name: %s, type: %s\n", level, ' ', 
            name.c_str(), type.c_str());
    if(FPs != nullptr){
        FPs -> output(level + 4);
    }
    stmt->output(level + 4);
}

void FunctionCall::output(int level)
{
    std::string name, type;
    name = symbolEntry->toStr();
    type = symbolEntry->getType()->toStr();
    fprintf(yyout, "%*cFuncCall\tname: %s\ttype: %s\n", level, ' ',
            name.c_str(), type.c_str());
    if(RPs != nullptr)
    {
        RPs -> output(level + 4);
    }
}

void IdList::output(int level)
{
    for (long unsigned int i = 0; i < idlist.size(); i++) {
        idlist.at(i)->output(level + 4);
    }
    for (long unsigned int i = 0; i < assignList.size(); i++) {
        assignList.at(i)->output(level + 4);
    }
}

void ConIdList::output(int level)
{
    for (long unsigned int i = 0; i < conidlist.size(); i++) {
        conidlist.at(i)->output(level + 4);
    }
    for (long unsigned int i = 0; i < assignList.size(); i++) {
        assignList.at(i)->output(level + 4);
    }
}

void FuncFParams::output(int level)
{
    fprintf(yyout, "%*cFuncFParams\n", level, ' ');
    for(long unsigned int i = 0; i < FPs.size(); i++)
    {
        FPs[i] -> output(level + 4);
    }
    for(long unsigned int i = 0; i < Assigns.size(); i++)
    {
        Assigns[i] -> output(level + 4);
    }
}

void FuncRParams::output(int level)
{
    fprintf(yyout, "%*cFuncRParams\n", level, ' ');
    for(long unsigned int i = 0; i < Exprs.size(); i++)
    {
        Exprs[i] -> output(level + 4);
    }
}

void Empty::output(int level)
{
    fprintf(yyout, "%*cEmpty Statement\n", level, ' ');
}

void SingleStmt::output(int level)
{
    fprintf(yyout, "%*cSingle Statement\n", level, ' ');
    expr->output(level + 4);
}